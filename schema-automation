(() => {
  // ---------- Utilidades ----------
  const $ = (s, c=document) => c.querySelector(s);
  const normKey = s => (s||'').toString().trim();
  const DEFAULT_MAPPING = {
    h1:     '#edit-title-0-value',
    title:  '#edit-field-ln-n-meta-tags-0-basic-title',
    desc:   '#edit-field-ln-n-meta-tags-0-basic-description',
    ogtitle:'#edit-field-ln-n-meta-tags-0-open-graph-og-title',
    ogdesc: '#edit-field-ln-n-meta-tags-0-open-graph-og-description',
    // url: '#edit-path-0-alias', // ative aqui ou no JSON opcional
  };

  function setValue(el, val) {
    if (!el) return false;
    const tag = el.tagName.toLowerCase();
    el.focus();
    if (tag === 'input' || tag === 'textarea' || tag === 'select') {
      el.value = val;
      el.dispatchEvent(new Event('input', {bubbles:true}));
      el.dispatchEvent(new Event('change', {bubbles:true}));
      return true;
    }
    return false;
  }
  function clearValue(el){ return setValue(el,''); }

  // ---------- UI ----------
  const ov = document.createElement('div');
  ov.style.cssText = 'position:fixed;inset:0;z-index:2147483647;background:rgba(0,0,0,.45);display:flex;align-items:center;justify-content:center';
  const bx = document.createElement('div');
  bx.style.cssText = 'background:#111;color:#eee;width:min(1000px,96vw);max-height:92vh;overflow:auto;border-radius:14px;box-shadow:0 12px 36px rgba(0,0,0,.4);padding:16px;font:13px/1.45 system-ui,Segoe UI,Roboto,Arial';

  bx.innerHTML = `
    <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;margin-bottom:8px">
      <b style="font-size:15px">Factory Filler — TSV + Campos Soltos (v2)</b>
      <button id="ff-close" style="padding:6px 10px;border:1px solid #444;border-radius:8px;background:#222;color:#eee">Fechar</button>
    </div>

    <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px">
      <div>
        <div style="opacity:.85;margin-bottom:6px"><b>1) Linha TSV (Excel)</b> — cabeçalho opcional (H1, Title, Desc, URL)</div>
        <textarea id="ff-tsv" placeholder="Cole aqui a LINHA TSV (1 ou 2 linhas: cabeçalho + valores)" style="width:100%;height:120px;background:#181818;color:#ddd;border:1px solid #333;border-radius:10px;padding:10px"></textarea>
        <div style="margin-top:6px;opacity:.7">Se colar só 1 linha, a ordem assumida é: H1, Title, Desc, URL.</div>
      </div>

      <div>
        <div style="opacity:.85;margin-bottom:6px"><b>2) Campos Soltos (opcionais)</b> — sobrescrevem o TSV</div>
        <div style="display:grid;grid-template-columns:1fr;gap:8px">
          <label>H1
            <input id="ff-h1" type="text" placeholder="Ex.: Headline da página" style="width:100%;background:#181818;color:#ddd;border:1px solid #333;border-radius:8px;padding:8px;margin-top:4px">
          </label>
          <label>Meta Title
            <input id="ff-title" type="text" placeholder="Ex.: Meta title" style="width:100%;background:#181818;color:#ddd;border:1px solid #333;border-radius:8px;padding:8px;margin-top:4px">
          </label>
          <label>Meta Description
            <textarea id="ff-desc" placeholder="Ex.: Meta description" style="width:100%;height:66px;background:#181818;color:#ddd;border:1px solid #333;border-radius:8px;padding:8px;margin-top:4px"></textarea>
          </label>
          <label>URL / Alias
            <input id="ff-url" type="text" placeholder="/meu-alias" style="width:100%;background:#181818;color:#ddd;border:1px solid #333;border-radius:8px;padding:8px;margin-top:4px">
          </label>

          <div style="display:flex;gap:16px;align-items:center;margin-top:6px">
            <label style="display:flex;gap:6px;align-items:center;">
              <input id="ff-sync-og-title" type="checkbox"> <span>OG Title = Meta Title</span>
            </label>
            <label style="display:flex;gap:6px;align-items:center;">
              <input id="ff-sync-og-desc" type="checkbox"> <span>OG Description = Meta Description</span>
            </label>
          </div>

          <label>OG Title
            <input id="ff-ogtitle" type="text" placeholder="(ou herdado do Meta Title)" style="width:100%;background:#181818;color:#bbb;border:1px solid #333;border-radius:8px;padding:8px;margin-top:4px">
          </label>
          <label>OG Description
            <textarea id="ff-ogdesc" placeholder="(ou herdado do Meta Description)" style="width:100%;height:66px;background:#181818;color:#bbb;border:1px solid #333;border-radius:8px;padding:8px;margin-top:4px"></textarea>
          </label>
        </div>
      </div>
    </div>

    <details style="margin-top:10px">
      <summary style="cursor:pointer;opacity:.9"><b>Opcional: Mapping JSON</b></summary>
      <textarea id="ff-json" placeholder='Cole o JSON exportado (com "items": [...]) para sobrescrever seletores.' style="width:100%;height:120px;background:#181818;color:#ddd;border:1px solid #333;border-radius:10px;padding:10px;margin-top:8px"></textarea>
      <div style="margin-top:6px;opacity:.7">Se vazio, uso o mapeamento padrão.</div>
    </details>

    <div style="display:flex;gap:8px;margin-top:12px">
      <button id="ff-run"  style="padding:10px 14px;border:1px solid #444;border-radius:10px;background:#2a7;color:#111;font-weight:600">Preencher</button>
      <button id="ff-dry"  style="padding:10px 14px;border:1px solid #444;border-radius:10px;background:#555;color:#eee;">Só simular</button>
      <button id="ff-clear"style="padding:10px 14px;border:1px solid #444;border-radius:10px;background:#222;color:#eee;">Limpar campos mapeados</button>
      <div style="opacity:.6;align-self:center">• Sincroniza OG ↔ Meta se marcado.</div>
    </div>

    <pre id="ff-out" style="margin-top:12px;background:#0d0d0d;border:1px solid #222;border-radius:10px;padding:10px;white-space:pre-wrap"></pre>
  `;
  ov.appendChild(bx);
  document.body.appendChild(ov);
  $('#ff-close').onclick = () => ov.remove();

  // ---------- Helpers de parsing/merge ----------
  function parseTSV(text){
    const lines = (text||'').trim().split(/\r?\n/).filter(Boolean);
    if (!lines.length) return {};
    let headers=[], values=[];
    if (lines.length===1){
      values = lines[0].split('\t');
      headers = ['H1','Title','Desc','URL'];
    } else {
      headers = lines[0].split('\t');
      values  = lines[1].split('\t');
    }
    const out={};
    headers.forEach((h,i)=>{ out[normKey(h)] = normKey(values[i]||''); });
    // normaliza nomes
    const map = {};
    Object.entries(out).forEach(([k,v])=>{
      const kk = k.toLowerCase();
      if (/(^|\s)h1($|\s)/.test(kk)) map.h1 = v;
      else if (kk.includes('meta title') || kk==='title') map.title = v;
      else if (kk.includes('meta description') || kk==='desc' || kk==='description') map.desc = v;
      else if (kk==='url' || kk==='alias' || kk==='path' || kk==='slug') map.url = v;
      else if (kk.includes('og') && kk.includes('title')) map.ogtitle = v;
      else if (kk.includes('og') && (kk.includes('desc')||kk.includes('description'))) map.ogdesc = v;
    });
    return map;
  }

  function buildSelectorMapFromJSON(jsonText) {
    if (!jsonText || !jsonText.trim()) return {...DEFAULT_MAPPING};
    try {
      const data = JSON.parse(jsonText);
      const items = Array.isArray(data.items) ? data.items : [];
      const map = {};
      for (const it of items) {
        const label = (it.field?.label||'').toLowerCase();
        const note  = (it.note||'').toLowerCase();
        const sel = it.field?.cssSelector || (it.field?.id ? '#'+it.field.id : null);
        if (!sel) continue;
        if (note.includes('recebe o h1') || ['titulo','título'].includes(label)) map.h1 = sel;
        if (note.includes('meta title') || label==='page title') map.title = sel;
        if (note.includes('meta description') || label==='description') map.desc = sel;
        if (note.includes('og title')) map.ogtitle = sel;
        if (note.includes('og description')) map.ogdesc = sel;
        if (label.includes('alias') || note.includes('alias') || note.includes('url')) map.url = sel;
      }
      return { ...DEFAULT_MAPPING, ...map };
    } catch { return {...DEFAULT_MAPPING}; }
  }

  function getManualValues() {
    return {
      h1:     normKey($('#ff-h1').value),
      title:  normKey($('#ff-title').value),
      desc:   normKey($('#ff-desc').value),
      url:    normKey($('#ff-url').value),
      ogtitle:normKey($('#ff-ogtitle').value),
      ogdesc: normKey($('#ff-ogdesc').value),
    };
  }

  function mergePayload(tsvObj, manualObj, syncOgTitle, syncOgDesc) {
    const p = {...tsvObj};
    // sobrescreve com campos soltos não vazios
    for (const k of ['h1','title','desc','url','ogtitle','ogdesc']) {
      if (manualObj[k]) p[k] = manualObj[k];
    }
    // sincroniza OG
    if (syncOgTitle) p.ogtitle = p.title || '';
    if (syncOgDesc)  p.ogdesc  = p.desc  || '';
    return p;
  }

  function fillFields(payload, selectorMap, {dryRun=false, doClear=false}={}) {
    const report = { filled:[], skipped:[], missing:[], unmapped:[] };
    const keys = ['h1','title','desc','ogtitle','ogdesc','url'];
    for (const key of keys) {
      const sel = selectorMap[key];
      const hasVal = Object.prototype.hasOwnProperty.call(payload,key) && payload[key]!=='' && payload[key]!=null;

      if (!sel) { if (hasVal) report.unmapped.push({key, value:payload[key]}); continue; }
      const el = $(sel);
      if (!el) { report.missing.push({key, selector:sel}); continue; }

      if (doClear && !hasVal) {
        if (!dryRun) clearValue(el);
        report.filled.push({key, selector:sel, value:''});
        continue;
      }
      if (hasVal) {
        if (!dryRun) setValue(el, payload[key]);
        report.filled.push({key, selector:sel, value:payload[key]});
      } else {
        report.skipped.push({key, selector:sel});
      }
    }
    return report;
  }

  function fmtReport(rep){
    const lines=[];
    if (rep.filled.length){
      lines.push('✅ Preenchidos:');
      rep.filled.forEach(x=>lines.push(`  • ${x.key} → ${x.selector}\n    ↳ ${x.value}`));
    }
    if (rep.skipped.length){
      lines.push('\n⏭️ Ignorados (sem valor):');
      rep.skipped.forEach(x=>lines.push(`  • ${x.key} → ${x.selector}`));
    }
    if (rep.unmapped.length){
      lines.push('\n❓ Sem mapeamento (valor fornecido, mas sem seletor):');
      rep.unmapped.forEach(x=>lines.push(`  • ${x.key} ↳ ${x.value}`));
    }
    if (rep.missing.length){
      lines.push('\n⚠️ Seletor não encontrado no DOM:');
      rep.missing.forEach(x=>lines.push(`  • ${x.key} → ${x.selector}`));
    }
    return lines.join('\n');
  }

  // ---------- Sync OG ↔ Meta (UI) ----------
  const titleEl = $('#ff-title');
  const descEl  = $('#ff-desc');
  const ogtEl   = $('#ff-ogtitle');
  const ogdEl   = $('#ff-ogdesc');
  const cSyncT  = $('#ff-sync-og-title');
  const cSyncD  = $('#ff-sync-og-desc');

  function updateOGTitleFromMeta() {
    if (cSyncT.checked) {
      ogtEl.value = titleEl.value;
      ogtEl.setAttribute('disabled','');
      ogtEl.style.opacity = .6;
    } else {
      ogtEl.removeAttribute('disabled');
      ogtEl.style.opacity = 1;
    }
  }
  function updateOGDescFromMeta() {
    if (cSyncD.checked) {
      ogdEl.value = descEl.value;
      ogdEl.setAttribute('disabled','');
      ogdEl.style.opacity = .6;
    } else {
      ogdEl.removeAttribute('disabled');
      ogdEl.style.opacity = 1;
    }
  }

  cSyncT.addEventListener('change', updateOGTitleFromMeta);
  cSyncD.addEventListener('change', updateOGDescFromMeta);
  titleEl.addEventListener('input', updateOGTitleFromMeta);
  descEl.addEventListener('input', updateOGDescFromMeta);
  // estado inicial
  updateOGTitleFromMeta();
  updateOGDescFromMeta();

  // ---------- Botões ----------
  const outEl = $('#ff-out');
  function getPayloadAndMap() {
    const tsv = parseTSV($('#ff-tsv').value);
    const manual = getManualValues();
    const syncT = cSyncT.checked;
    const syncD = cSyncD.checked;
    const data = mergePayload(tsv, manual, syncT, syncD);
    const map  = buildSelectorMapFromJSON($('#ff-json').value);
    return { data, map };
  }

  $('#ff-run').onclick = () => {
    const {data, map} = getPayloadAndMap();
    const rep = fillFields(data, map, {dryRun:false, doClear:false});
    outEl.textContent = fmtReport(rep);
  };
  $('#ff-dry').onclick = () => {
    const {data, map} = getPayloadAndMap();
    const rep = fillFields(data, map, {dryRun:true, doClear:false});
    outEl.textContent = '[Simulação]\n' + fmtReport(rep);
  };
  $('#ff-clear').onclick = () => {
    const {map} = getPayloadAndMap();
    const rep = fillFields({}, map, {dryRun:false, doClear:true});
    outEl.textContent = '[Limpeza]\n' + fmtReport(rep);
  };
})();
